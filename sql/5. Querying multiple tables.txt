5. Querying Multiple Tables
# Cartesian Product
This type of join is known as a cross join, and it is rarely
used (on purpose, at least).

mysql> SELECT c.first_name, c.last_name, a.address
 -> FROM customer c JOIN address a;


# # Inner Joins
If you do not specify the type of join, then the server will do an inner join by default.

mysql> SELECT c.first_name, c.last_name, a.address
 -> FROM customer c JOIN address a
 -> ON c.address_id = a.address_id;
 
 
# The ANSI Join Syntax
This older method of specifying joins does not include the on subclause; instead,
tables are named in the from clause separated by commas, and join conditions are
included in the where clause.

mysql> SELECT c.first_name, c.last_name, a.address
 -> FROM customer c, address a
 -> WHERE c.address_id = a.address_id;
 
The benefits of the SQL92 join syntax are easier to identify for complex queries that
include both join and filter conditions.

MariaDB [sakila]> select c.first_name, c.last_name, a.address
    -> from customer c, address a
    -> where c.address_id = a.address_id
    ->  AND a.postal_code = 52137;
	
# # Joining Three or More Tables
mysql> SELECT c.first_name, c.last_name, ct.city
 -> FROM customer c
 -> INNER JOIN address a
 -> ON c.address_id = a.address_id
 -> INNER JOIN city ct
 -> ON a.city_id = ct.city_id;
 
# Using Subqueries as Tables
MariaDB [sakila]> select c.first_name, c.last_name, addr.address, addr.city
    -> from customer c
    ->  inner join
    ->   (select a.address_id, a.address, ct.city
    ->    from address a
    ->    inner join city ct
    ->    on a.city_id = ct.city_id
    ->    where a.district = 'California') addr
    ->  on c.address_id = addr.address_id;

	
# Using the Same Table Twice
MariaDB [sakila]> select f.title from film f
    -> inner join film_actor fa
    -> on f.film_id = fa.film_id
    -> inner join actor a
    -> on fa.actor_id = a.actor_id
    -> where ((a.first_name = 'CATE' AND a.last_name = 'MCQUEEN') OR (a.first_name = 'CUBA' AND a.last_name = 'BIRCH'));
	
from this query below, it can be answer of a question:
which movie that those actor acted together, it show title of movies
mysql> SELECT f.title
 -> FROM film f
 -> INNER JOIN film_actor fa1
 -> ON f.film_id = fa1.film_id
 -> INNER JOIN actor a1
 -> ON fa1.actor_id = a1.actor_id
 -> INNER JOIN film_actor fa2
 -> ON f.film_id = fa2.film_id
 -> INNER JOIN actor a2
 -> ON fa2.actor_id = a2.actor_id
 -> WHERE (a1.first_name = 'CATE' AND a1.last_name = 'MCQUEEN')
 -> AND (a2.first_name = 'CUBA' AND a2.last_name = 'BIRCH')


# # Self-Joins
mysql> SELECT f.title, f_prnt.title prequel
 -> FROM film f
 -> INNER JOIN film f_prnt
 -> ON f_prnt.film_id = f.prequel_film_id
 -> WHERE f.prequel_film_id IS NOT NULL;
 

# # Exercise 5
# Exercise 5-1
MariaDB [sakila]> select c.first_name, c.last_name, a.address, ct.city
    -> from customer c
    -> inner join address a
    -> on c.address_id = a.address_id
    -> inner join city ct
    -> on a.city_id = ct.city_id
    -> where a.district = 'California';


# Exercise 5-2
MariaDB [sakila]> select a.first_name, a.last_name, f.title
    -> from actor a
    -> inner join film_actor fa
    -> on a.actor_id = fa.actor_id
    -> inner join film f
    -> on f.film_id = fa.film_id
    -> where first_name = 'JOHN';
	
	
# Exercise 5-3 (confused)
mysql> SELECT a1.address addr1, a2.address addr2, a1.city_id
 -> FROM address a1
 -> INNER JOIN address a2
 -> WHERE a1.city_id = a2.city_id
 -> AND a1.address_id <> a2.address_id;