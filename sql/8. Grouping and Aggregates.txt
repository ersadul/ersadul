8. Grouping and Aggregates
# # Grouping Concepts
grouping means group the duplicate data of table
and we can count of those group by
count() function that means to counts the number of rows in each group
*(asterisk) means everything in the groups

MariaDB [sakila]> select customer_id, count(*)
    -> from rental
    -> group by customer_id;

we can order descending the result by column 2 to see which customer that 
had rent film the most
MariaDB [sakila]> select customer_id, count(*)
    -> from rental
    -> group by customer_id
    -> order by 2 desc;
	
we cannot use where clause to filter out some data when we use group
, because where clause executed before group by being executed

mysql> SELECT customer_id, count(*)
 -> FROM rental
 -> WHERE count(*) >= 40
 -> GROUP BY customer_id;
ERROR 1111 (HY000): Invalid use of group function

to filter the groups we can use having clause to solve the problem
so, we can filter out ghe groups that having count above or equal to fourty
MariaDB [sakila]> select customer_id, count(*)
    -> from rental
    -> group by customer_id
    -> having count(*) >= 40;



# # Aggregate Functions
aggregate function perform a specific operation over all rows in a group
> max()
Returns the maximum value within a set
> min()
Returns the minimum value within a set
> avg()
Returns the average value across a set
> sum()
Returns the sum of the values across a set
> count()
Returns the number of values in a set

MariaDB [sakila]> select max(amount) max_amt,
    -> min(amount) min_amt,
    -> avg(amount) avg_amt,
    -> sum(amount) sum_amt,
    -> count(*) num_payment
    -> from payment;
	
	
- Implicit Versus Explicit Groups
SELECT customer_id,
 MAX(amount) max_amt,
 MIN(amount) min_amt,
 AVG(amount) avg_amt,
 SUM(amount) tot_amt,
 COUNT(*) num_payments
FROM payment;
However, if we try to execute the query, we will receive the following error:
ERROR 1140 (42000): In aggregated query without GROUP BY, 
 expression #1 of SELECT list contains nonaggregated column
 
if we want to show the customer_id too, we must write the explicit
query that specific how data should be grouped.

mysql> SELECT customer_id,
 -> MAX(amount) max_amt,
 -> MIN(amount) min_amt,
 -> AVG(amount) avg_amt,
 -> SUM(amount) tot_amt,
 -> COUNT(*) num_payments
 -> FROM payment
 -> GROUP BY customer_id;
 

- Counting Distinct Values
MariaDB [sakila]> select count(customer_id) num_rows, count(
    -> distinct customer_id) num_customers
    -> from payment;

- Using Expressions
MariaDB [sakila]> select max(datediff(return_date, rental_date)) from rental;


- How Nulls Are Handled
null still counted as a row



# # Generating Groups

# Single-Column Grouping
mysql> SELECT actor_id, count(*)
 -> FROM film_actor
 -> GROUP BY actor_id;


# Multicolumn Grouping
for calculating count in multicolumn grouping 
we cant use ANSI Join table way to join our table.
we should use inner join as usual to count all grouping 
member

mysql> SELECT fa.actor_id, f.rating, count(*)
 -> FROM film_actor fa
 -> INNER JOIN film f
 -> ON fa.film_id = f.film_id
 -> GROUP BY fa.actor_id, f.rating
 -> ORDER BY 1,2;

# Grouping via Expressions
we can select and do grouping by values generated by the expression
MariaDB [sakila]> select extract(YEAR FROM rental_date) year,
    -> count(*) how_many
    -> from rental
    -> group by extract(YEAR FROM rental_date);


# Generating Rollups
we can do rollup to selected columns we want
GROUP BY ROLLUP(fa.actor_id, f.rating)

GROUP BY a, ROLLUP(b, c)

mysql> SELECT fa.actor_id, f.rating, count(*)
 -> FROM film_actor fa
 -> INNER JOIN film f
 -> ON fa.film_id = f.film_id
 -> GROUP BY fa.actor_id, f.rating WITH ROLLUP
 -> ORDER BY 1,2;



# # Group Filter Conditions
we can do filtering data with some conditions after the where clause

mysql> SELECT fa.actor_id, f.rating, count(*)
 -> FROM film_actor fa
 -> INNER JOIN film f
 -> ON fa.film_id = f.film_id
 -> WHERE f.rating IN ('G','PG')
 -> GROUP BY fa.actor_id, f.rating
 -> HAVING count(*) > 9;


# # Exercise 
# Exercise 8-1
Construct a query that counts the number of rows in the payment table
MariaDB [sakila]> select count(*) num_rows
    -> from payment;


# Exercise 8-2
Modify your query from Exercise 8-1 to count the number of payments made by each
customer. Show the customer ID and the total amount paid for each customer.
MariaDB [sakila]> select customer_id, sum(amount), count(*) payments_made
    -> from payment
    -> group by customer_id;
	
	
# Exercise 8-3
Modify your query from Exercise 8-2 to include only those customers who have
made at least 40 payments.
MariaDB [sakila]> select customer_id, sum(amount), count(*) payment_made
    -> from payment
    -> group by customer_id
    -> having count(*) >= 40;